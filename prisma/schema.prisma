// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Department {
  ENGINEERING
  HUMANITIES
  LIFE_SCIENCES
  PHYSICAL_SCIENCES
  SOCIAL_SCIENCES
}

// https://admission.ucla.edu/apply/majors
enum Major {
  COGNITIVE_SCIENCE
  COMPUTER_SCIENCE
}

// https://admission.ucla.edu/apply/minors
enum Minor {
  LINGUISTICS
}

enum Pronouns {
  NOT_LISTED
  HE_HIM
  SHE_HER
  THEY_THEM
}

model Student {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String          @unique @db.VarChar(100) // TODO: remove and use something else in LabeledJob
  jobs           LabeledJob[]
  studentProfile StudentProfile?
}

model StudentProfile {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  student         Student  @relation(fields: [studentId], references: [id])
  studentId       String   @unique @db.Uuid
  firstName       String   @db.VarChar(80)
  lastName        String   @db.VarChar(80)
  pronouns        Pronouns
  preferredEmail  String?  @db.VarChar(100)
  phoneNumber     String?  @db.VarChar(30)
  bio             String   @db.VarChar(500)
  major           Major
  additionalMajor Major?
  minor           Minor?
  additionalMinor Minor?
  graduationDate  String   @db.VarChar(12)
  gpa             String   @db.VarChar(5)
  majorGpa        String   @db.VarChar(5)
  skills          String[] @db.VarChar(60)
  experience      String?  @db.VarChar(1000)
  coursework      String?  @db.VarChar(800)
  links           String[] @db.VarChar(200)
  // resume
}

model Researcher {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String             @unique @db.VarChar(100)
  jobs              Job[]
  researcherProfile ResearcherProfile?
}

model ResearcherProfile {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  researcher   Researcher @relation(fields: [researcherId], references: [id])
  researcherId String     @unique @db.Uuid
  name         String     @db.VarChar(161)
}

enum Duration {
  QUARTERLY
  SUMMER
  ACADEMIC_YEAR
  YEAR_ROUND
}

enum Location {
  ON_CAMPUS
  OFF_CAMPUS
  REMOTE
}

model Job {
  id          Int          @id @default(autoincrement())
  created     DateTime     @default(now())
  closingDate DateTime? // maybe
  closed      Boolean
  title       String       @db.VarChar(50)
  description String
  posterId    String       @db.Uuid
  poster      Researcher   @relation(fields: [posterId], references: [id])
  applicants  LabeledJob[]
  paid        Boolean
  duration    Duration
  departments Department[]
  weeklyHours Int
  credit      Boolean
  location    Location
  external    Boolean      @default(false)
}

enum JobStatus {
  HIDDEN
  SAVED
  APPLIED
}

enum PIJobStatus {
  CONSIDERING
  REVIEWING
  REJECTED
  INTERVIEWING
  ACCEPTED
  JOINED
}

model LabeledJob {
  job            Job         @relation(fields: [jobId], references: [id])
  jobId          Int
  applicant      Student     @relation(fields: [applicantEmail], references: [email])
  applicantEmail String      @db.VarChar(100)
  lastUpdated    DateTime    @default(now())
  status         JobStatus
  piStatus       PIJobStatus
  bookmarked     Boolean     @default(false)

  @@id([jobId, applicantEmail])
}
